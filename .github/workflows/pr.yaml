name: PR Request

on:
  pull_request:
    branches:
      - "dev/v[0-9]+.[0-9]+.[0-9]+"
      - "beta/v[0-9]+.[0-9]+.[0-9]+"
      - "stable/v[0-9]+.[0-9]+.[0-9]+"

jobs:
  test_playwright:
    name: Test Playwright - general
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
      - uses: actions/setup-node@v4
      - working-directory: frontend
        run: npm i && npm run build
      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      - working-directory: backend
        run: go build -o filebrowser .
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./_docker/Dockerfile.playwright-general
          push: false
  test_playwright_proxy:
    name: Test Playwright - proxy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
      - uses: actions/setup-node@v4
      - working-directory: frontend
        run: npm i && npm run build
      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      - working-directory: backend
        run: go build -o filebrowser .
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./_docker/Dockerfile.playwright-proxy
          push: false
  test_playwright_noauth:
    name: Test Playwright - noauth
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
      - uses: actions/setup-node@v4
      - working-directory: frontend
        run: npm i && npm run build
      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      - working-directory: backend
        run: go build -o filebrowser .
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./_docker/Dockerfile.playwright-noauth
          push: false
  push_pr_to_registry:
    name: Push PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: gtstef/filebrowser
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./_docker/Dockerfile.slim
          push: false # Do not push the image for now
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ steps.meta.outputs.revision }}
  push_slim_release_to_registry:
    name: Push slim release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{ secrets.PAT }}
      - name: Extract metadata (tags, labels) for Docker and GHCR
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            gtstef/filebrowser
            ghcr.io/gtsteffaniak/filebrowser
      - name: Modify tags for slim image
        id: modify-json-slim
        run: |
          RAW_TAG="${GITHUB_REF_NAME}"  # e.g., v0.7.7-beta or 705/merge
          CLEAN_TAG=$(echo "$RAW_TAG" | sed 's/^v//' | sed 's#[^a-zA-Z0-9_.-]#-#g')
          BASE_TAG="gtstef/filebrowser:${CLEAN_TAG}-slim"

          TAGS="[\"$BASE_TAG\"]"

          MODIFIED_JSON=$(echo "$TAGS" | jq -c '
            {tags: .} |
            if any(.tags[]; test("beta")) then
              .tags += [
                "gtstef/filebrowser:beta-slim",
                "gtstef/filebrowser:slim"
              ]
            else . end |
            if any(.tags[]; test("stable")) then
              .tags += [
                "gtstef/filebrowser:stable-slim",
                "gtstef/filebrowser:slim"
              ]
            else . end
          ')

          TAGS_CSV=$(echo "$MODIFIED_JSON" | jq -r '.tags | join(",")')
          echo "cleaned_tag=$TAGS_CSV" >> $GITHUB_OUTPUT
      - name: Build and push slim image
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          file: ./_docker/Dockerfile.slim
          push: true
          tags: ${{ steps.modify-json-slim.outputs.cleaned_tag }}
          labels: ${{ steps.meta.outputs.labels }}
